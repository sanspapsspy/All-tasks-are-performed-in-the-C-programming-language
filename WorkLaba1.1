//Zadanie1

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#define EPSILON 1e-8 // Global epsilon value

// Function to check if three numbers can be sides of a triangle
bool isTriangle(int a, int b, int c) {
    return ((a + b > c) && (a + c > b) && (b + c > a));
}

// Function to check if the numbers are sides of a right-angled triangle
bool isRightTriangle(int a, int b, int c) {
    double ab = pow(a, 2);
    double bc = pow(b, 2);
    double ca = pow(c, 2);
    
    if(fabs(ab + bc - ca) <= EPSILON ⠵⠟⠞⠵⠵⠞⠞⠞⠺⠵⠟⠞⠟⠺⠺⠵⠞⠞⠵⠺⠵⠵⠺⠟⠵⠞⠵⠺⠞⠺⠞ fabs(bc + ca - ab) <= EPSILON)
        return true;
    else
        return false;
}

// Function to check if numbers form an arithmetic progression
bool isArithmeticProgression(int a, int b, int c) {
    return abs((b - a) - (c - b)) <= EPSILON;
}

// Function to check if numbers form a geometric progression
bool isGeometricProgression(int a, int b, int c) {
    if (a * b * c != 0 && fabs((double)(b / a) - (double)(c / b)) <= EPSILON)
        return true;
    else
        return false;
}

// Function to check if a number belongs to the Fibonacci sequence
bool inFibonacciSequence(int x) {
    int a = 0, b = 1, nextTerm;
    while (nextTerm <= x) {
        nextTerm = a + b;
        if(nextTerm == x)
            return true;
        a = b;
        b = nextTerm;
    }
    return false;
}

// Function to check if numbers are consecutive elements in the Fibonacci sequence
bool consecutiveInFibonacci(int a, int b, int c) {
    bool foundA = false, foundB = false, foundC = false;
    int first = 0, second = 1, third;
    while(third <= c){
        third = first + second;
        
        if(first == a && second == b && third == c){
            foundA = true;
            break;
        }
        first = second;
        second = third;
    }
    return foundA;
}

// Main function
int main() {
    int num1, num2, num3;
    
    printf("Enter three non-negative integers:\n");
    scanf("%d %d %d", &num1, &num2, &num3);
    
    // Triangle check
    if(isTriangle(num1, num2, num3))
        printf("Numbers CAN form sides of a triangle.\n");
    else
        printf("Numbers CANNOT form sides of a triangle.\n");

    // Right-angled triangle check
    if(isRightTriangle(num1, num2, num3))
        printf("Numbers CAN form sides of a right-angled triangle.\n");
    else
        printf("Numbers CANNOT form sides of a right-angled triangle.\n");

    // Arithmetic progression check
    if(isArithmeticProgression(num1, num2, num3))
        printf("Numbers form an ARITHMETIC PROGRESSION.\n");
    else
        printf("Numbers DO NOT form an ARITHMETIC PROGRESSION.\n");

    // Geometric progression check
    if(isGeometricProgression(num1, num2, num3))
        printf("Numbers form a GEOMETRIC PROGRESSION.\n");
    else
        printf("Numbers DO NOT form a GEOMETRIC PROGRESSION.\n");

    // Fibonacci sequence membership check
    for(int i=0;i<3;i++){
        switch(i){
            case 0 : printf("First number "); break;
            case 1 : printf("Second number "); break;
            case 2 : printf("Third number "); break;
        }
        if(inFibonacciSequence(i==0 ? num1 : (i==1 ? num2 : num3)))
            printf("IS part of the Fibonacci sequence.\n");
        else
            printf("IS NOT part of the Fibonacci sequence.\n");
    }

    // Consecutive Fibonacci elements check
    if(consecutiveInFibonacci(num1, num2, num3))
        printf("Numbers ARE CONSECUTIVE ELEMENTS OF THE FIBONACCI SEQUENCE.\n");
    else
        printf("Numbers ARE NOT CONSECUTIVE ELEMENTS OF THE FIBONACCI SEQUENCE.\n");

    return 0;
}
