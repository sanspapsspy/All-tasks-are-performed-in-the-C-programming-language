#include <stdio.h>

void bubble_sort(int arr[], int n) 
{
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = 0; j < n - 1 - i; j++) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void selection_sort(int arr[], int n) 
{
    for (int i = 0; i < n - 1; i++) 
    {
        int min_index = i;
        for (int j = i + 1; j < n; j++) 
        {
            if (arr[j] < arr[min_index]) 
            {
                min_index = j;
            }
        }
        if (min_index != i) {
            int temp = arr[i];
            arr[i] = arr[min_index];
            arr[min_index] = temp;
        }
    }
}

void insertion_sort(int arr[], int n) 
{
    for (int i = 1; i < n; i++) 
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) 
        {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void heapify(int arr[], int n, int i) 
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    
    if (left < n && arr[left] > arr[largest]) largest = left;
    if (right < n && arr[right] > arr[largest]) largest = right;

    if (largest != i) 
    {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heap_sort(int arr[], int n) 
{
    for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) 
    {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

void print_array(int arr[], int n) 
{
    for (int i = 0; i < n; i++) 
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);

    int arr_copy[n];

    printf("Исходный массив: ");
    print_array(arr, n);
    
    // Bubble sort
    bubble_sort(arr, n);
    printf("Отсортированный массив (пузырьком): ");
    print_array(arr, n);
    
    // Resetting array
    memcpy(arr_copy, arr, sizeof(arr));
    
    // Selection sort
    selection_sort(arr_copy, n);
    printf("Отсортированный массив (выбором): ");
    print_array(arr_copy, n);

    // Resetting array
    memcpy(arr_copy, arr, sizeof(arr));

    // Insertion sort
    insertion_sort(arr_copy, n);
    printf("Отсортированный массив (вставками): ");
    print_array(arr_copy, n);

    // Resetting array
    memcpy(arr_copy, arr, sizeof(arr));

    // Heap sort
    heap_sort(arr_copy, n);
    printf("Отсортированный массив (пирамидальная): ");
    print_array(arr_copy, n);

    return 0;
}
