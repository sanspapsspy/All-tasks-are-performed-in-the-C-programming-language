#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int convert_from_base(const char *number_str, int base) {
  int result = 0;
  int power = 0;
  int len = strlen(number_str);
  for (int i = len - 1; i >= 0; i--) {
    char digit = toupper(number_str[i]);
    if (digit >= '0' && digit <= '9') {
      result += (digit - '0') * (base ^ power);
    } else if (digit >= 'A' && digit <= 'Z') {
      result += (digit - 'A' + 10) * (base ^ power);
    } else {
      return -1; // Неверный символ
    }
    power++;
  }
  return result;
}

int main() {
  char number_str[100];
  int base;

  printf("Введите строковое представление числа: ");
  scanf("%s", number_str);

  printf("Введите основание системы счисления (от 2 до 36): ");
  scanf("%d", &base);

  if (base < 2 || base > 36) {
    printf("Неверный диапазон основания.\n");
    return 1;
  }

  int decimal_value = convert_from_base(number_str, base);

  if (decimal_value == -1) {
    printf("Неверный символ в числе.\n");
    return 1;
  }

  printf("Десятичное представление числа: %d\n", decimal_value);

  return 0;
}
//1. convert_from_base(const char *number_str, int base):
//*  Функция принимает строку number_str, представляющую число, и основание системы счисления base в качестве аргументов.
//*  Инициализирует переменные result (для хранения десятичного результата), power (для отслеживания степени основания) и len (длину строки).
//*  Использует цикл for для итерации по символам строки number_str с конца к началу.
//*  Для каждой цифры:
//*  Переводит символ в верхний регистр с помощью toupper().
//*  Если символ является цифрой (от '0' до '9'), вычисляет ее значение, используя digit - '0'.
//*  Если символ является буквой (от 'A' до 'Z'), вычисляет ее значение, используя digit - 'A' + 10.
//*  Умножает полученное значение на соответствующую степень основания base ^ power.
//*  Складывает полученное значение к result.
//*  Увеличивает power на 1.
//*  Если символ не является цифрой или буквой, возвращает -1, сигнализируя о неверном символе.
//*  Возвращает result - десятичное значение преобразованного числа.
//2. main():
//*  Считывает строку с представлением числа и основание системы счисления от пользователя.
//*  Проверяет, что основание находится в допустимом диапазоне (от 2 до 36).
//*  Вызывает функцию convert_from_base() для преобразования числа.
//*  Если функция вернула -1, выводит сообщение об ошибке.
//*  В противном случае выводит полученное десятичное значение.
